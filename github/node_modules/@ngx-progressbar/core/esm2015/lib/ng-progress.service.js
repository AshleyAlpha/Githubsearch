/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable, Inject, Optional } from '@angular/core';
import { NgProgressRef } from './ng-progress-ref';
import { NG_PROGRESS_CONFIG } from './ng-progress.interface';
import * as i0 from "@angular/core";
import * as i1 from "./ng-progress.interface";
const ɵ0 = (n) => {
    if (n >= 0 && n < 20)
        return 10;
    if (n >= 20 && n < 50)
        return 4;
    if (n >= 50 && n < 80)
        return 2;
    if (n >= 80 && n < 99)
        return 0.5;
    return 0;
};
/** @type {?} */
const defaultConfig = {
    min: 8,
    max: 100,
    speed: 200,
    debounceTime: 0,
    trickleSpeed: 300,
    fixed: true,
    meteor: true,
    thick: false,
    spinner: true,
    ease: 'linear',
    color: '#1B95E0',
    direction: 'ltr+',
    spinnerPosition: 'right',
    trickleFunc: ɵ0
};
export class NgProgress {
    /**
     * @param {?} config
     */
    constructor(config) {
        /**
         * Store progress bar instances
         */
        this._instances = new Map();
        this.config = config ? Object.assign({}, defaultConfig, config) : defaultConfig;
    }
    /**
     * Get or Create progress bar by ID
     * @param {?=} id
     * @param {?=} config
     * @return {?}
     */
    ref(id = 'root', config) {
        if (this._instances.has(id)) {
            /** @type {?} */
            const progressRef = this._instances.get(id);
            if (config) {
                progressRef.setConfig(Object.assign({}, this.config, config));
            }
            return progressRef;
        }
        else {
            /** @type {?} */
            const progressRef = new NgProgressRef(Object.assign({}, this.config, config), this.deleteInstance(id));
            return this._instances.set(id, progressRef).get(id);
        }
    }
    /**
     * Destroy all progress bar instances
     * @return {?}
     */
    destroyAll() {
        this._instances.forEach((ref) => ref.destroy());
    }
    /**
     * A destroyer function for each progress bar instance
     * @param {?} id
     * @return {?}
     */
    deleteInstance(id) {
        return () => {
            this._instances.delete(id);
        };
    }
}
NgProgress.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
NgProgress.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NG_PROGRESS_CONFIG,] }] }
];
/** @nocollapse */ NgProgress.ngInjectableDef = i0.defineInjectable({ factory: function NgProgress_Factory() { return new NgProgress(i0.inject(i1.NG_PROGRESS_CONFIG, 8)); }, token: NgProgress, providedIn: "root" });
if (false) {
    /**
     * Store progress bar instances
     * @type {?}
     */
    NgProgress.prototype._instances;
    /**
     * Global config
     * @type {?}
     */
    NgProgress.prototype.config;
}
export { ɵ0 };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctcHJvZ3Jlc3Muc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3gtcHJvZ3Jlc3NiYXIvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9uZy1wcm9ncmVzcy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2xELE9BQU8sRUFBb0Isa0JBQWtCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQzs7O1dBZ0JoRSxDQUFDLENBQVMsRUFBVSxFQUFFO0lBQ2pDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRTtRQUFFLE9BQU8sRUFBRSxDQUFDO0lBQ2hDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRTtRQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ2hDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRTtRQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ2hDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRTtRQUFFLE9BQU8sR0FBRyxDQUFDO0lBQ2xDLE9BQU8sQ0FBQyxDQUFDO0NBQ1Y7O0FBcEJILE1BQU0sYUFBYSxHQUFxQjtJQUN0QyxHQUFHLEVBQUUsQ0FBQztJQUNOLEdBQUcsRUFBRSxHQUFHO0lBQ1IsS0FBSyxFQUFFLEdBQUc7SUFDVixZQUFZLEVBQUUsQ0FBQztJQUNmLFlBQVksRUFBRSxHQUFHO0lBQ2pCLEtBQUssRUFBRSxJQUFJO0lBQ1gsTUFBTSxFQUFFLElBQUk7SUFDWixLQUFLLEVBQUUsS0FBSztJQUNaLE9BQU8sRUFBRSxJQUFJO0lBQ2IsSUFBSSxFQUFFLFFBQVE7SUFDZCxLQUFLLEVBQUUsU0FBUztJQUNoQixTQUFTLEVBQUUsTUFBTTtJQUNqQixlQUFlLEVBQUUsT0FBTztJQUN4QixXQUFXLElBTVY7Q0FDRixDQUFDO0FBS0YsTUFBTSxPQUFPLFVBQVU7Ozs7SUFRckIsWUFBb0QsTUFBd0I7Ozs7MEJBTDlDLElBQUksR0FBRyxFQUF5QjtRQU01RCxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxDQUFDLG1CQUFLLGFBQWEsRUFBSyxNQUFNLEVBQUUsQ0FBQyxDQUFDLGFBQWEsQ0FBQztLQUN0RTs7Ozs7OztJQU9ELEdBQUcsQ0FBQyxFQUFFLEdBQUcsTUFBTSxFQUFFLE1BQXlCO1FBQ3hDLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUU7O1lBRTNCLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQzVDLElBQUksTUFBTSxFQUFFO2dCQUNWLFdBQVcsQ0FBQyxTQUFTLG1CQUFLLElBQUksQ0FBQyxNQUFNLEVBQUssTUFBTSxFQUFFLENBQUM7YUFDcEQ7WUFDRCxPQUFPLFdBQVcsQ0FBQztTQUNwQjthQUFNOztZQUVMLE1BQU0sV0FBVyxHQUFHLElBQUksYUFBYSxtQkFBSyxJQUFJLENBQUMsTUFBTSxFQUFLLE1BQU0sR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDNUYsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsV0FBVyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ3JEO0tBQ0Y7Ozs7O0lBS0QsVUFBVTtRQUNSLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBa0IsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7S0FDaEU7Ozs7OztJQUtPLGNBQWMsQ0FBQyxFQUFVO1FBQy9CLE9BQU8sR0FBRyxFQUFFO1lBQ1YsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDNUIsQ0FBQzs7OztZQWhETCxVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7Ozs7NENBU2MsUUFBUSxZQUFJLE1BQU0sU0FBQyxrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3QsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE5nUHJvZ3Jlc3NSZWYgfSBmcm9tICcuL25nLXByb2dyZXNzLXJlZic7XHJcbmltcG9ydCB7IE5nUHJvZ3Jlc3NDb25maWcsIE5HX1BST0dSRVNTX0NPTkZJRyB9IGZyb20gJy4vbmctcHJvZ3Jlc3MuaW50ZXJmYWNlJztcclxuXHJcbmNvbnN0IGRlZmF1bHRDb25maWc6IE5nUHJvZ3Jlc3NDb25maWcgPSB7XHJcbiAgbWluOiA4LFxyXG4gIG1heDogMTAwLFxyXG4gIHNwZWVkOiAyMDAsXHJcbiAgZGVib3VuY2VUaW1lOiAwLFxyXG4gIHRyaWNrbGVTcGVlZDogMzAwLFxyXG4gIGZpeGVkOiB0cnVlLFxyXG4gIG1ldGVvcjogdHJ1ZSxcclxuICB0aGljazogZmFsc2UsXHJcbiAgc3Bpbm5lcjogdHJ1ZSxcclxuICBlYXNlOiAnbGluZWFyJyxcclxuICBjb2xvcjogJyMxQjk1RTAnLFxyXG4gIGRpcmVjdGlvbjogJ2x0cisnLFxyXG4gIHNwaW5uZXJQb3NpdGlvbjogJ3JpZ2h0JyxcclxuICB0cmlja2xlRnVuYzogKG46IG51bWJlcik6IG51bWJlciA9PiB7XHJcbiAgICBpZiAobiA+PSAwICYmIG4gPCAyMCkgcmV0dXJuIDEwO1xyXG4gICAgaWYgKG4gPj0gMjAgJiYgbiA8IDUwKSByZXR1cm4gNDtcclxuICAgIGlmIChuID49IDUwICYmIG4gPCA4MCkgcmV0dXJuIDI7XHJcbiAgICBpZiAobiA+PSA4MCAmJiBuIDwgOTkpIHJldHVybiAwLjU7XHJcbiAgICByZXR1cm4gMDtcclxuICB9XHJcbn07XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ1Byb2dyZXNzIHtcclxuXHJcbiAgLyoqIFN0b3JlIHByb2dyZXNzIGJhciBpbnN0YW5jZXMgKi9cclxuICBwcml2YXRlIHJlYWRvbmx5IF9pbnN0YW5jZXMgPSBuZXcgTWFwPHN0cmluZywgTmdQcm9ncmVzc1JlZj4oKTtcclxuXHJcbiAgLyoqIEdsb2JhbCBjb25maWcgKi9cclxuICBjb25maWc6IE5nUHJvZ3Jlc3NDb25maWc7XHJcblxyXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBJbmplY3QoTkdfUFJPR1JFU1NfQ09ORklHKSBjb25maWc6IE5nUHJvZ3Jlc3NDb25maWcpIHtcclxuICAgIHRoaXMuY29uZmlnID0gY29uZmlnID8gey4uLmRlZmF1bHRDb25maWcsIC4uLmNvbmZpZ30gOiBkZWZhdWx0Q29uZmlnO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IG9yIENyZWF0ZSBwcm9ncmVzcyBiYXIgYnkgSURcclxuICAgKiBAcGFyYW0gaWRcclxuICAgKiBAcGFyYW0gY29uZmlnXHJcbiAgICovXHJcbiAgcmVmKGlkID0gJ3Jvb3QnLCBjb25maWc/OiBOZ1Byb2dyZXNzQ29uZmlnKSB7XHJcbiAgICBpZiAodGhpcy5faW5zdGFuY2VzLmhhcyhpZCkpIHtcclxuICAgICAgLy8gR2V0IFByb2dyZXNzUmVmIGluc3RhbmNlXHJcbiAgICAgIGNvbnN0IHByb2dyZXNzUmVmID0gdGhpcy5faW5zdGFuY2VzLmdldChpZCk7XHJcbiAgICAgIGlmIChjb25maWcpIHtcclxuICAgICAgICBwcm9ncmVzc1JlZi5zZXRDb25maWcoey4uLnRoaXMuY29uZmlnLCAuLi5jb25maWd9KTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gcHJvZ3Jlc3NSZWY7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvLyBDcmVhdGUgbmV3IFByb2dyZXNzUmVmIGluc3RhbmNlXHJcbiAgICAgIGNvbnN0IHByb2dyZXNzUmVmID0gbmV3IE5nUHJvZ3Jlc3NSZWYoey4uLnRoaXMuY29uZmlnLCAuLi5jb25maWd9LCB0aGlzLmRlbGV0ZUluc3RhbmNlKGlkKSk7XHJcbiAgICAgIHJldHVybiB0aGlzLl9pbnN0YW5jZXMuc2V0KGlkLCBwcm9ncmVzc1JlZikuZ2V0KGlkKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIERlc3Ryb3kgYWxsIHByb2dyZXNzIGJhciBpbnN0YW5jZXNcclxuICAgKi9cclxuICBkZXN0cm95QWxsKCkge1xyXG4gICAgdGhpcy5faW5zdGFuY2VzLmZvckVhY2goKHJlZjogTmdQcm9ncmVzc1JlZikgPT4gcmVmLmRlc3Ryb3koKSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBIGRlc3Ryb3llciBmdW5jdGlvbiBmb3IgZWFjaCBwcm9ncmVzcyBiYXIgaW5zdGFuY2VcclxuICAgKi9cclxuICBwcml2YXRlIGRlbGV0ZUluc3RhbmNlKGlkOiBzdHJpbmcpIHtcclxuICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgIHRoaXMuX2luc3RhbmNlcy5kZWxldGUoaWQpO1xyXG4gICAgfTtcclxuICB9XHJcbn1cclxuIl19