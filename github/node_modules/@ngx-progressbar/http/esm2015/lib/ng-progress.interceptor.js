/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable, Optional, Inject } from '@angular/core';
import { finalize } from 'rxjs/operators';
import { NgProgress } from '@ngx-progressbar/core';
import { NG_PROGRESS_HTTP_CONFIG } from './ng-progress-http.interface';
export class NgProgressInterceptor {
    /**
     * @param {?} ngProgress
     * @param {?=} config
     */
    constructor(ngProgress, config) {
        this._inProgressCount = 0;
        this._config = {
            id: 'root',
            silentApis: []
        };
        this._config = config ? Object.assign({}, this._config, config) : this._config;
        this._progressRef = ngProgress.ref(this._config.id);
    }
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    intercept(req, next) {
        // Ignore by request headers
        if (req.headers.has('ignoreProgressBar')) {
            return next.handle(req.clone({ headers: req.headers.delete('ignoreProgressBar') }));
        }
        // Ignore silent api requests
        if (this.checkUrl(req)) {
            return next.handle(req);
        }
        this._inProgressCount++;
        if (!this._progressRef.isStarted) {
            this._progressRef.start();
        }
        return next.handle(req).pipe(finalize(() => {
            this._inProgressCount--;
            if (this._inProgressCount === 0) {
                this._progressRef.complete();
            }
        }));
    }
    /**
     * Check if request is silent.
     * @param {?} req request
     * @return {?}
     */
    checkUrl(req) {
        /** @type {?} */
        const url = req.url.toLowerCase();
        /** @type {?} */
        const found = this._config.silentApis.find((u) => url.startsWith(u));
        return !!found;
    }
}
NgProgressInterceptor.decorators = [
    { type: Injectable }
];
/** @nocollapse */
NgProgressInterceptor.ctorParameters = () => [
    { type: NgProgress },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NG_PROGRESS_HTTP_CONFIG,] }] }
];
if (false) {
    /** @type {?} */
    NgProgressInterceptor.prototype._inProgressCount;
    /** @type {?} */
    NgProgressInterceptor.prototype._progressRef;
    /** @type {?} */
    NgProgressInterceptor.prototype._config;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctcHJvZ3Jlc3MuaW50ZXJjZXB0b3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4LXByb2dyZXNzYmFyL2h0dHAvIiwic291cmNlcyI6WyJsaWIvbmctcHJvZ3Jlc3MuaW50ZXJjZXB0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUc3RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDMUMsT0FBTyxFQUFFLFVBQVUsRUFBaUIsTUFBTSx1QkFBdUIsQ0FBQztBQUNsRSxPQUFPLEVBQXdCLHVCQUF1QixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFHN0YsTUFBTSxPQUFPLHFCQUFxQjs7Ozs7SUFTaEMsWUFBWSxVQUFzQixFQUErQyxNQUE2QjtnQ0FQbkYsQ0FBQzt1QkFFcUI7WUFDL0MsRUFBRSxFQUFFLE1BQU07WUFDVixVQUFVLEVBQUUsRUFBRTtTQUNmO1FBR0MsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsQ0FBQyxtQkFBSyxJQUFJLENBQUMsT0FBTyxFQUFLLE1BQU0sRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUNwRSxJQUFJLENBQUMsWUFBWSxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNyRDs7Ozs7O0lBRUQsU0FBUyxDQUFDLEdBQXFCLEVBQUUsSUFBaUI7O1FBR2hELElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsRUFBRTtZQUN4QyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ25GOztRQUdELElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUN0QixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDekI7UUFFRCxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUV4QixJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUU7WUFDaEMsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUMzQjtRQUVELE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQzFCLFFBQVEsQ0FBQyxHQUFHLEVBQUU7WUFDWixJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztZQUN4QixJQUFJLElBQUksQ0FBQyxnQkFBZ0IsS0FBSyxDQUFDLEVBQUU7Z0JBQy9CLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLENBQUM7YUFDOUI7U0FDRixDQUFDLENBQ0gsQ0FBQztLQUNIOzs7Ozs7SUFNTyxRQUFRLENBQUMsR0FBcUI7O1FBQ3BDLE1BQU0sR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7O1FBQ2xDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JFLE9BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQzs7OztZQWxEbEIsVUFBVTs7OztZQUhGLFVBQVU7NENBYW9CLFFBQVEsWUFBSSxNQUFNLFNBQUMsdUJBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgT3B0aW9uYWwsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBIdHRwSW50ZXJjZXB0b3IsIEh0dHBFdmVudCwgSHR0cEhhbmRsZXIsIEh0dHBSZXF1ZXN0IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IGZpbmFsaXplIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBOZ1Byb2dyZXNzLCBOZ1Byb2dyZXNzUmVmIH0gZnJvbSAnQG5neC1wcm9ncmVzc2Jhci9jb3JlJztcclxuaW1wb3J0IHsgTmdQcm9ncmVzc0h0dHBDb25maWcsIE5HX1BST0dSRVNTX0hUVFBfQ09ORklHIH0gZnJvbSAnLi9uZy1wcm9ncmVzcy1odHRwLmludGVyZmFjZSc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBOZ1Byb2dyZXNzSW50ZXJjZXB0b3IgaW1wbGVtZW50cyBIdHRwSW50ZXJjZXB0b3Ige1xyXG5cclxuICBwcml2YXRlIF9pblByb2dyZXNzQ291bnQgPSAwO1xyXG4gIHByaXZhdGUgX3Byb2dyZXNzUmVmOiBOZ1Byb2dyZXNzUmVmO1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgX2NvbmZpZzogTmdQcm9ncmVzc0h0dHBDb25maWcgPSB7XHJcbiAgICBpZDogJ3Jvb3QnLFxyXG4gICAgc2lsZW50QXBpczogW11cclxuICB9O1xyXG5cclxuICBjb25zdHJ1Y3RvcihuZ1Byb2dyZXNzOiBOZ1Byb2dyZXNzLCBAT3B0aW9uYWwoKSBASW5qZWN0KE5HX1BST0dSRVNTX0hUVFBfQ09ORklHKSBjb25maWc/OiBOZ1Byb2dyZXNzSHR0cENvbmZpZykge1xyXG4gICAgdGhpcy5fY29uZmlnID0gY29uZmlnID8gey4uLnRoaXMuX2NvbmZpZywgLi4uY29uZmlnfSA6IHRoaXMuX2NvbmZpZztcclxuICAgIHRoaXMuX3Byb2dyZXNzUmVmID0gbmdQcm9ncmVzcy5yZWYodGhpcy5fY29uZmlnLmlkKTtcclxuICB9XHJcblxyXG4gIGludGVyY2VwdChyZXE6IEh0dHBSZXF1ZXN0PGFueT4sIG5leHQ6IEh0dHBIYW5kbGVyKTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj4ge1xyXG5cclxuICAgIC8vIElnbm9yZSBieSByZXF1ZXN0IGhlYWRlcnNcclxuICAgIGlmIChyZXEuaGVhZGVycy5oYXMoJ2lnbm9yZVByb2dyZXNzQmFyJykpIHtcclxuICAgICAgcmV0dXJuIG5leHQuaGFuZGxlKHJlcS5jbG9uZSh7aGVhZGVyczogcmVxLmhlYWRlcnMuZGVsZXRlKCdpZ25vcmVQcm9ncmVzc0JhcicpfSkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIElnbm9yZSBzaWxlbnQgYXBpIHJlcXVlc3RzXHJcbiAgICBpZiAodGhpcy5jaGVja1VybChyZXEpKSB7XHJcbiAgICAgIHJldHVybiBuZXh0LmhhbmRsZShyZXEpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuX2luUHJvZ3Jlc3NDb3VudCsrO1xyXG5cclxuICAgIGlmICghdGhpcy5fcHJvZ3Jlc3NSZWYuaXNTdGFydGVkKSB7XHJcbiAgICAgIHRoaXMuX3Byb2dyZXNzUmVmLnN0YXJ0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG5leHQuaGFuZGxlKHJlcSkucGlwZShcclxuICAgICAgZmluYWxpemUoKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuX2luUHJvZ3Jlc3NDb3VudC0tO1xyXG4gICAgICAgIGlmICh0aGlzLl9pblByb2dyZXNzQ291bnQgPT09IDApIHtcclxuICAgICAgICAgIHRoaXMuX3Byb2dyZXNzUmVmLmNvbXBsZXRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENoZWNrIGlmIHJlcXVlc3QgaXMgc2lsZW50LlxyXG4gICAqIEBwYXJhbSByZXEgcmVxdWVzdFxyXG4gICAqL1xyXG4gIHByaXZhdGUgY2hlY2tVcmwocmVxOiBIdHRwUmVxdWVzdDxhbnk+KSB7XHJcbiAgICBjb25zdCB1cmwgPSByZXEudXJsLnRvTG93ZXJDYXNlKCk7XHJcbiAgICBjb25zdCBmb3VuZCA9IHRoaXMuX2NvbmZpZy5zaWxlbnRBcGlzLmZpbmQoKHUpID0+IHVybC5zdGFydHNXaXRoKHUpKTtcclxuICAgIHJldHVybiAhIWZvdW5kO1xyXG4gIH1cclxufVxyXG4iXX0=